lower_CI <- append(lower_CI, E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(0, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, rep(E[t] + upper_pred, lookahead))
lower_CI <- append(lower_CI, rep(E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)), lookahead))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(tidyverse)
library(ggthemes)
library(survival)
library(survminer)
library(RColorBrewer)
initial_capital <- 50  # C alpha
p_gamble = 0.44 # Probability of success in gamble
xi <- 2*p_gamble - 1  # Used for C(t) = initial_capital + xi * t
num_simulations <- 125  # Number of stochastic simulations for data
simulation_duration <- 2000  # Total simulation time
lookahead <- 5/(p_gamble - p_gamble^2)
T <- seq(1, simulation_duration, by = 1)  # Simulation time vector
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, E[t] + upper_pred)
lower_CI <- append(lower_CI, E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob = p_gamble) - t
upper_CI <- append(upper_CI, E[t] + upper_pred)
lower_CI <- append(lower_CI, E[t] - (t - qbinom(p = 0.025, size = t, prob = p_gamble)))
}
temp <- data.frame(TCI,lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
df
ggplot(df, aes(x = TCI, y = lower_CI)) +
geom_line() +
geom_line(aes(x = TCI, y = upper_CI))
expected <- function()
theoretical_model <- function(prob, duration) {
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
xi <- 2 * prob - 1
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
upper_pred <- 2 * qbinom(p = 0.975, size = t, prob) - t
upper_CI <- append(upper_CI, E[t] + upper_pred)
lower_CI <- append(lower_CI, E[t] - (t - qbinom(p = 0.025, size = t, prob)))
}
temp <- data.frame(TCI,lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
theoretical_model <- function(p, duration) {
xi <- 2 * p - 1
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
pred <- 2 * qbinom(p = 0.975, size = t, prob = p) - t
upper_CI <- append(upper_CI, E[t] + pred)
lower_CI <- append(lower_CI, E[t] - ())
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(tidyverse)
library(ggthemes)
library(survival)
library(survminer)
library(RColorBrewer)
initial_capital <- 50  # C alpha
p_gamble = 0.44 # Probability of success in gamble
xi <- 2*p_gamble - 1  # Used for C(t) = initial_capital + xi * t
num_simulations <- 125  # Number of stochastic simulations for data
simulation_duration <- 2000  # Total simulation time
lookahead <- 5/(p_gamble - p_gamble^2)
T <- seq(1, simulation_duration, by = 1)  # Simulation time vector
theoretical_model <- function(p, duration) {
xi <- 2 * p - 1
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in TCI) {
pred <- 2 * qbinom(p = 0.975, size = t, prob = p) - t
upper_CI <- append(upper_CI, E[t] + pred)
lower_CI <- append(lower_CI, E[t] - ())
survival <- function(sim) {
surv_df <- sim %>%
group_by(name) %>%
mutate(censor = min(which(value %in% c(0)), simulation_duration)) %>%
mutate(surv = (censor < simulation_duration)) %>%
ungroup() %>%
select(censor, surv)
return(Surv(surv_df$censor, surv_df$surv))
}
surv_obj <- survival(sims_long)
kmfit <- survfit(surv_obj ~ 1, data = sims_long)
ggsurvplot(kmfit, risk.table = FALSE, conf.int = TRUE, ggtheme = theme_minimal(), legend = "none", color = "black", font.x = 14, font.y = 14, font.tickslab = 14, fonts.subtitle = 14)
kmfit
plot(kmfit)
plot(kmfit)
plot(kmfit, xlab="yo")
plot(kmfit, xlab="Fjöldi umferða", ylab="Hlutfall leikja í spilun")
survival <- function(sim) {
surv_df <- sim %>%
group_by(name) %>%
mutate(censor = min(which(value %in% c(0)), simulation_duration)) %>%
mutate(surv = (censor < simulation_duration)) %>%
ungroup() %>%
select(censor, surv)
return(Surv(surv_df$censor, surv_df$surv))
}
surv_obj <- survival(sims_long)
kmfit <- survfit(surv_obj ~ 1, data = sims_long)
text(x = 800, y = 0.6, "p = 0.44")
ggsurvplot(kmfit, risk.table = FALSE, conf.int = TRUE, ggtheme = theme_minimal(), legend = "none", color = "black", font.x = 14, font.y = 14, font.tickslab = 14, fonts.subtitle = 14)
plot(kmfit)
plot(kmfit, xlab = "Fjöldi umferða", ylab = "Líkindi lifunar")
text(x = 600, y = 0.5, "p = 0.44")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(tidyverse)
library(ggthemes)
library(survival)
library(survminer)
library(RColorBrewer)
num_bins <- 10
median_surv <- c()
for (i in 1:num_bins) {
sims <- wrap_sim(30, 0.4)
surv <- survival(sims)
fit <- survfit(surv ~ 1)
median_surv <- append(
median_surv,
surv_median(fit)$median
)
}
surv_median
surv_median
median_surv
hist(median_surv)
num_bins <- 200
median_surv <- c()
for (i in 1:num_bins) {
sims <- wrap_sim(30, 0.4)
surv <- survival(sims)
fit <- survfit(surv ~ 1)
median_surv <- append(
median_surv,
surv_median(fit)$median
)
}
hist(median_surv)
num_bins <- 400
median_surv <- c()
for (i in 1:num_bins) {
sims <- wrap_sim(30, 0.4)
surv <- survival(sims)
fit <- survfit(surv ~ 1)
median_surv <- append(
median_surv,
surv_median(fit)$median
)
}
num_bins <- 400
median_surv <- c()
for (i in 1:num_bins) {
sims <- wrap_sim(30, 0.4)
surv <- survival(sims)
fit <- survfit(surv ~ 1)
median_surv <- append(
median_surv,
surv_median(fit)$median
)
}
View(data_raw)
hist(median_surv)
vec_surv_median <- function(vec) {
result <- c()
for (x in vec) {
len <- length(result)
y <- surv_median(x)
if (!is.na(y$median)) result <- append(result, y$median)
}
return(result)
}
medians <- vec_surv_median(sim_median)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(tidyverse)
library(ggthemes)
library(survival)
library(survminer)
library(RColorBrewer)
initial_capital <- 50  # C alpha
p_gamble = 0.44 # Probability of success in gamble
xi <- 2*p_gamble - 1  # Used for C(t) = initial_capital + xi * t
num_simulations <- 125  # Number of stochastic simulations for data
simulation_duration <- 2000  # Total simulation time
lookahead <- 5/(p_gamble - p_gamble^2)
T <- seq(1, simulation_duration, by = 1)  # Simulation time vector
theoretical_model <- function(p, duration) {
xi <- 2 * p - 1
E <- rep(initial_capital, simulation_duration) + xi * T  # Expected capital trend
upper_CI <- c()
lower_CI <- c()
TCI <- seq(1, simulation_duration, by = lookahead)
for (t in T) {
pred <- 2 * qbinom(p = 0.975, size = t, prob = p) - t
upper_CI <- append(upper_CI, E[t] + pred)
lower_CI <- append(lower_CI, E[t] - (1))
}
temp <- data.frame(T, E, lower_CI, upper_CI)
return(temp)
}
df <- theoretical_model(p_gamble, simulation_duration)
simulate_game <- function(p) {
rolls <- purrr::rbernoulli(simulation_duration, p)
rolls <- as.integer(rolls)
num_wins <- cumsum(rolls)
num_losses <- T - num_wins
capital <- initial_capital + num_wins - num_losses
return(capital)
}
wrap_sim <- function(n, p) {
sims <- data.frame(T)
for (i in 1:n) {
temp <- simulate_game(p)
sims <- cbind(sims, temp)
}
sim_colnames <- paste("sim",1:n, sep="")
colnames(sims) <- c("T", sim_colnames)
sims_long <- sims %>%
pivot_longer(paste("sim", 1:n, sep="")) %>%
mutate(p = p)
return(sims_long)
}
sims_long <- wrap_sim(450, p_gamble)
ggplot(data = sims_long, aes(x = T, y = value, group = name)) +
geom_line(alpha = 0.2, col = "#C8A4D2") +
geom_line(data = df, aes(x = T, y = E, group = "non-group")) +
labs(
x = "Simulation time",
y = "Capital value"
) +
theme_minimal() +
scale_color_brewer(palette="PRGn")
survival <- function(sim) {
surv_df <- sim %>%
group_by(name) %>%
mutate(censor = min(which(value %in% c(0)), simulation_duration)) %>%
mutate(surv = (censor < simulation_duration)) %>%
ungroup() %>%
select(censor, surv)
return(Surv(surv_df$censor, surv_df$surv))
}
surv_obj <- survival(sims_long)
kmfit <- survfit(surv_obj ~ 1, data = sims_long)
ggsurvplot(kmfit, risk.table = FALSE, conf.int = TRUE, ggtheme = theme_minimal(), legend = "none", color = "black", font.x = 14, font.y = 14, font.tickslab = 14, fonts.subtitle = 14)
probs <- c(0.35, 0.4, 0.45, 0.5)
sims <- list()
for (prob in probs) {
len <- length(sims)
surv <- survival(wrap_sim(450, prob))
sims[[len + 1]] <- survfit(surv ~ 1)
}
convert_survdata <- function(survData) {
generic_start <- list(1.00, 0)
endpoint <- list(survData$surv[length(survData$surv)], simulation_duration)
newSurv <- append(append(generic_start[[1]], survData$surv), endpoint[[1]])
newTime <- append(append(generic_start[[2]], survData$time), endpoint[[2]])
return(data.frame(surv = newSurv, time = newTime))
}
draw_km_curves <- function() {}
for (i in 1:length(sims)) assign(paste0("km", i), convert_survdata(sims[[i]]))
ggplot(data = km1, aes(x = time, y = surv)) +
geom_step(aes(colour = "0.35"), size = 1.0) +
geom_step(data = km2, aes(colour = "0.40"), size = 1.0) +
geom_step(data = km3, aes(colour = "0.45"), size = 1.0) +
geom_step(data = km4, aes(colour = "0.50"), size = 1.0) +
theme_minimal() +
theme(legend.position = "bottom") +
labs(
x = "Time",
y = "Survival probability",
colour = "Value of p"
) +
theme(text = element_text(size = 14)) +
scale_color_brewer(palette="PRGn")
probs <- seq(0.01, 1, by = 0.01)
sim_median <- list()
for (prob in probs) {
len <- length(sim_median)
surv <- survival(wrap_sim(40, prob))
sim_median[[len + 1]] <- survfit(surv ~ 1)
}
vec_surv_median <- function(vec) {
result <- c()
for (x in vec) {
len <- length(result)
y <- surv_median(x)
if (!is.na(y$median)) result <- append(result, y$median)
}
return(result)
}
medians <- vec_surv_median(sim_median)
probs_used <- probs[1:length(medians)]
median_by_prob <- data.frame(surv_median = medians, p = probs_used)
ggplot(median_by_prob, aes(x = p, y = surv_median)) +
geom_line(size = 1) +
theme_minimal() +
labs(
x = "Probability of success",
y = "Median of survival"
) +
ylim(0, 2000) +
xlim(0, 0.5) +
theme(text = element_text(size = 14))
simulation_duration <- 100000
s <- wrap_sim(10, 0.5)
s
ggplot(s, aes(x = T, y = value, color = name)) + geom_line()
s
unique(s$value)
s <- wrap_sim(10, 0.5)
s
s %>% filter(name == "sim1") %>% ggplot(aes(x = T, y = value))
s %>% filter(name == "sim1") %>% ggplot(aes(x = T, y = value)) + geom_line()
s
s$sim1
s %>% filter(name == "sim1")
s1 <- s %>% filter(name == "sim1")
s1
View(s1)
T
s1$T
plot(s1$T, s1$value)
num_bins <- 400
median_surv <- c()
for (i in 1:num_bins) {
sims <- wrap_sim(30, 0.4)
surv <- survival(sims)
fit <- survfit(surv ~ 1)
median_surv <- append(
median_surv,
surv_median(fit)$median
)
}
